{"version":3,"sources":["webpack:///./task-1.js","webpack:///./task-2.js","webpack:///./task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","id","amount","logSuccess","catch","logError","warn"],"mappings":"0HAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,kBAAMF,EAAQF,KAAKA,OAIhCK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCCXXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAId,SAAQ,SAACC,EAASC,GAC3B,IAAMa,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/Dd,YAAW,WACLY,GACFd,EAAQc,GAGVb,EAAO,aACN,SAGDE,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAqB7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GC5CnC,IAIMe,EAAkB,SAACC,GACrB,IAL+BC,EAAKC,EAK9BxB,GALyBuB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKlD,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACYoB,KAAKE,SAAW,GAG/BxB,EAAQ,CAAEyB,GAAIN,EAAYM,GAAIrB,KAAMP,IAEpCI,EAAOkB,EAAYM,MAExB5B,OAIXqB,EAAgB,CAAEO,GAAI,GAAIC,OAAQ,MAAOnB,KAAKoB,GAAYC,MAAMC,GAEhE,IAAMF,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIrB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,QAGIyB,EAAW,SAAAJ,GACfpB,QAAQyB,KAAR,gCAA6CL,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKoB,GACLC,MAAMC,GAETX,EAAgB,CAAEO,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKoB,GACLC,MAAMC,GAETX,EAAgB,CAAEO,GAAI,GAAIC,OAAQ,KAC/BnB,KAAKoB,GACLC,MAAMC,GAETX,EAAgB,CAAEO,GAAI,GAAIC,OAAQ,MAC/BnB,KAAKoB,GACLC,MAAMC,K","file":"main.009a146a29fabdbc942b.js","sourcesContent":["const delay = ms => {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => resolve(ms), ms);\n    });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    \n    setTimeout(() => {\n      if (updatedUsers) {\n        resolve(updatedUsers);\n      }\n\n      reject(' Error ');\n    }, 500);\n  });   \n};\nconst logger = updatedUsers => console.table(updatedUsers);\n\nfunction onToggleUserStateSuccess(result) {\n  console.log(\"onToggleUserStateSuccess\");\n  console.log(result);\n}\n  \nfunction onToggleUserState(error) {\n  console.log('onToggleUserState');\n  console.log(error);\n  }\n\n/*\n * Сейчас работает так\n */\n//toggleUserState(users, 'Mango', logger);\n//toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n                resolve({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n        }, delay);\n    });\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n//makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n//makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n//makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n//makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}